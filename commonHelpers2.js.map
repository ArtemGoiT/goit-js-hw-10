{"version":3,"file":"commonHelpers2.js","sources":["../src/js/2-snackbar.js"],"sourcesContent":["import iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\n// Ці рядки імпортують бібліотеку iziToast для використання функцій створення сповіщень і CSS - стилів,\n//   які потрібні для відображення цих сповіщень на сторінці.\n\nconst form = document.querySelector('.form');\n\n// Цей рядок знаходить перший елемент форми на сторінці за допомогою його класу .form і зберігає його в змінній form.\n\nfunction createPromise(event) {\n  event.preventDefault();\n\n  // Ця функція createPromise створюється для обробки події відправки форми.\n  //  Вона перериває стандартну дію відправки форми методом event.preventDefault(), щоб уникнути перезавантаження сторінки.\n\n  const delayInput = form.delay.value;\n  const state = form.state.value;\n  const delay = Number(delayInput);\n\n  // Тут отримуються значення полів форми, таких як значення затримки та стан обіцянки,\n  // і зберігаються відповідно в змінних delayInput, state та delay.\n\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (state === 'fulfilled') {\n        resolve(delay);\n      } else if (state === 'rejected') {\n        reject(delay);\n      }\n    }, delay);\n  });\n\n  // Тут створюється новий об'єкт Promise,\n  //  який виконується через певний період часу, визначений змінною delay.Він розрішується або відхиляється в залежності від значення state.\n\n  promise\n    .then(delay => {\n      iziToast.success({\n        message: `✅ Fulfilled promise in ${delay}ms`,\n        position: 'bottomCenter',\n      });\n    })\n    .catch(delay => {\n      iziToast.error({\n        message: `❌ Rejected promise in ${delay}ms`,\n        position: 'bottomCenter',\n      });\n    });\n}\n\n// Тут обробляються результати виконання обіцянки.Якщо обіцянка успішно виконалася, виводиться успішне повідомлення з вказаною затримкою.\n// Якщо обіцянка була відхилена, виводиться відповідне повідомлення про помилку.\n\nform.addEventListener('submit', createPromise);\n\n// Цей рядок додає обробник події submit до форми. Коли користувач відправляє форму, викликається функція createPromise, яка обробляє цю подію.\n"],"names":["form","createPromise","event","delayInput","state","delay","resolve","reject","iziToast"],"mappings":"+FAMA,MAAMA,EAAO,SAAS,cAAc,OAAO,EAI3C,SAASC,EAAcC,EAAO,CAC5BA,EAAM,eAAc,EAKpB,MAAMC,EAAaH,EAAK,MAAM,MACxBI,EAAQJ,EAAK,MAAM,MACnBK,EAAQ,OAAOF,CAAU,EAKf,IAAI,QAAQ,CAACG,EAASC,IAAW,CAC/C,WAAW,IAAM,CACXH,IAAU,YACZE,EAAQD,CAAK,EACJD,IAAU,YACnBG,EAAOF,CAAK,CAEf,EAAEA,CAAK,CACZ,CAAG,EAME,KAAKA,GAAS,CACbG,EAAS,QAAQ,CACf,QAAS,0BAA0BH,CAAK,KACxC,SAAU,cAClB,CAAO,CACP,CAAK,EACA,MAAMA,GAAS,CACdG,EAAS,MAAM,CACb,QAAS,yBAAyBH,CAAK,KACvC,SAAU,cAClB,CAAO,CACP,CAAK,CACL,CAKAL,EAAK,iBAAiB,SAAUC,CAAa"}